C51 COMPILER V9.60.7.0   AT24C02                                                           12/06/2023 10:21:19 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE AT24C02
OBJECT MODULE PLACED IN .\Objects\at24c02.obj
COMPILER INVOKED BY: E:\Keil C51\C51\BIN\C51.EXE ..\src\at24c02.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\include;..\src) DEB
                    -UG OBJECTEXTEND PRINT(.\Listings\at24c02.lst) OBJECT(.\Objects\at24c02.obj)

line level    source

   1          /**
   2           * ‰ΩúËÄÖÔºöÊùéÂÆóÈúñ Êó•ÊúüÔºö2023/12/04
   3           * CSDNÊòµÁß∞ÔºöLeisure_Ê∞¥‰∏≠È±º
   4           * CSDN: https://blog.csdn.net/Supine_0?type=blog
   5           * ----------------------------------------------
   6           * Ê≥®ÊÑè: 24c02ÁöÑÊìç‰ΩúÊòØÂü∫‰∫éI2CÊìç‰ΩúÁöÑ ÊâÄ‰ª•ÂØπÂÖ∂‰∏∫Âº∫‰æùËµñ 'i2c.h'
   7           */
   8          #include "i2c.h"
   9          
  10          #ifndef uchar
  11          #define uchar unsigned char
  12          #endif
  13          
  14          #define PAGE_BIT 4
  15          #define PAGE_END 0x0f
  16          
  17          #define PAGE_BYTE 0x10 // ‰πüÁºìÂÜ≤Âô®Â≠óËäÇÊï∞
  18          
  19          // ËøûÁª≠ËØªÊó∂Â∫è
  20          bit At24c02_ReadData(uchar sla, uchar suba, uchar* dat, uchar num)
  21          {
  22   1          bit flg;
  23   1          uchar i;
  24   1          if (!num)
  25   1              return 1;
  26   1          I2C_Start();       // ÂêØÂä®I2CÊÄªÁ∫ø
  27   1          I2C_SendByte(sla); // ÂèëÈÄÅÂô®‰ª∂Âú∞ÂùÄÁ†Å
  28   1          if (flg = I2C_CheckAck())
  29   1          {
  30   2              I2C_SendByte(suba); // ÂèëÈÄÅÊúüÈó¥ÂçïÂÖÉÂú∞ÂùÄ
  31   2              if (flg = I2C_CheckAck())
  32   2              {
  33   3                  I2C_Start();           // ÈáçÊñ∞ÂêØÂä®I2CÊÄªÁ∫ø
  34   3                  I2C_SendByte(sla + 1); // ÂèëÈÄÅÂÜôÂô®‰ª∂Âú∞ÂùÄÁ†Å‰ø°Âè∑
  35   3                  if (flg = I2C_CheckAck())
  36   3                  {
  37   4                      for (i = num - 1; i; --i)
  38   4                      {
  39   5                          *dat = I2C_RecByte();
  40   5                          I2C_Ack();
  41   5                          ++dat;
  42   5                      }
  43   4                      *dat = I2C_RecByte();
  44   4                      I2C_NoAck();
  45   4                  }
  46   3              }
  47   2          }
  48   1          I2C_Stop();
  49   1          return flg;
  50   1      }
  51          
  52          // È°µÂÜôÂÖ•Êó∂Â∫è ÊúÄÂ§ö‰∏∫ È°µÂÜôÁºìÂÜ≤Âô®ÁöÑÂ§ßÂ∞è Â≠óËäÇ Ë∂ÖÂá∫‰ºöË¢´Âæ™ÁéØË¶ÜÁõñ ‰∏îÊ≠§ÂáΩÊï∞‰∏çÂ∏¶Âª
             -∂Ëøü
  53          bit At24c02_WriteByte(uchar sla, uchar suba, uchar* dat, uchar num)
C51 COMPILER V9.60.7.0   AT24C02                                                           12/06/2023 10:21:19 PAGE 2   

  54          {
  55   1          bit flg;
  56   1          uchar i;
  57   1          if (!num)
  58   1              return 1;
  59   1          I2C_Start();       // ÂêØÂä®I2CÊÄªÁ∫ø
  60   1          I2C_SendByte(sla); // ÂèëÈÄÅÂô®‰ª∂Âú∞ÂùÄÁ†Å
  61   1          if (flg = I2C_CheckAck())
  62   1          {
  63   2              I2C_SendByte(suba); // ÂèëÈÄÅÊúüÈó¥ÂçïÂÖÉÂú∞ÂùÄ
  64   2              if (flg = I2C_CheckAck())
  65   2              {
  66   3                  for (i = num; i; --i)
  67   3                  {
  68   4                      I2C_SendByte(*dat);
  69   4                      if (!(flg = I2C_CheckAck()))
  70   4                          break; // Êó†Â∫îÁ≠î
  71   4                      ++dat;
  72   4                  }
  73   3              }
  74   2          }
  75   1          I2C_Stop(); // ÂèëÈÄÅÁªìÊùü‰ø°Âè∑
  76   1          return flg;
  77   1      }
  78          
  79          void At24c02_Wait(void) // 12MHz 1000us
  80          {
  81   1          uchar t = 164;
  82   1          while (t--)
  83   1              ;
  84   1          for (t = 2; t; --t)
  85   1              ;
  86   1      }
  87          
  88          bit At24c02_Check(uchar sla) // Ê£ÄÊü•ÊòØÂê¶ÂÜôÂÖ•ÂÆåÊàê
  89          {
  90   1          uchar i = 16;
  91   1          do // ÊØèÊØ´ÁßíÊ£ÄÊµã‰∏ÄÊ¨°Â¶ÇÊûú 16 Ê¨°Êú™Â∫îÁ≠îÂàôÊòØ‰∏∫ÈîôËØØ
  92   1          {
  93   2              At24c02_Wait();
  94   2              I2C_Start();
  95   2              I2C_SendByte(sla); // ÂèëÈÄÅÂô®‰ª∂Âú∞ÂùÄÁ†Å
  96   2          } while (!I2C_CheckAck() && --i);
  97   1          I2C_Stop();
  98   1          return (i != 0);
  99   1      }
 100          
 101          // ËøûÁª≠È°µÂÜôÂÖ• Â∏¶Âª∂Ëøü(Á°Æ‰øùÂÜôÂÖ•ÂÆåÊàê)
 102          bit At24c02_WriteData(uchar sla, uchar suba, uchar* dat, uchar num)
 103          {
 104   1          uchar begin, end, i;
 105   1          if (!num)
 106   1              return 1;
 107   1          begin = suba >> PAGE_BIT;
 108   1          end = (suba + (num - 1)) >> PAGE_BIT;
 109   1          if (begin != end)
 110   1          {
 111   2              i = PAGE_END - (suba & PAGE_END) + 1;
 112   2              At24c02_WriteByte(sla, suba, dat, i);
 113   2              suba += i;
 114   2              dat += i;
 115   2              ++begin;
C51 COMPILER V9.60.7.0   AT24C02                                                           12/06/2023 10:21:19 PAGE 3   

 116   2              if (!At24c02_Check(sla))
 117   2                  return 0;
 118   2          }
 119   1          while ((begin != end) && begin < PAGE_END)
 120   1          {
 121   2              At24c02_WriteByte(sla, suba, dat, PAGE_BYTE);
 122   2              suba += PAGE_BYTE;
 123   2              dat += PAGE_BYTE;
 124   2              ++begin;
 125   2              if (!At24c02_Check(sla))
 126   2                  return 0;
 127   2          }
 128   1          if (At24c02_WriteByte(
 129   1                  sla,
 130   1                  suba,
 131   1                  dat,
 132   1                  ((begin == end) ? ((num - i) & PAGE_END) : (PAGE_END))
 133   1              ))
 134   1              return At24c02_Check(sla);
 135   1          else
 136   1              return 0;
 137   1      }
 138          
 139          /**
 140           * 2023/12/04
 141           * ÊúÄÂºÄÂßãÂ≠¶24c02Êàë‰ª•‰∏∫È°µÂÜôÂÖ•Êìç‰ΩúÊòØÂ≠òÂÇ®Á©∫Èó¥Ë¢´‰æãÂ¶Ç ÂàíÂàÜ‰∏∫‰∫Ü ÊØèÈ°µ16byte ÂÖ±16page
 142           * Êàë‰ª•‰∏∫ÊòØÂè™ËÉΩ‰ª•ÊØèÈ°µ‰∏∫Âçï‰ΩçËøõË°åÂ≠òÂÇ® ‰æãÂ¶Ç 0x03 ÂºÄÂßãÂ≠òÂÇ®Âà∞0x0f‰ºöËá™Âä®ËøîÂõûÂà∞0x00
 143           * ÂÆûÈôÖ‰∏äÊòØ‰∏ÄÊ¨°ÊúÄÂ§öËøûÁª≠ÂÜôÂÖ•16byte ‰∏ãÈù¢ÊúâÊàëÂÆûÁé∞ÁöÑ 'ÈîôËØØ' ÁöÑËøûÁª≠È°µÂÜôÂÖ•ÊñπÂºè
 144          ÂÆûÁé∞ÊñπÊ≥ïÂæàÊúâÂèÇËÄÉ‰ª∑ÂÄº
 145           * ÊïÖÊ≠§‰øùÁïô ÂèÇËßÅ24c02ÁöÑÊï∞ÊçÆÊâãÂÜåÂèØÁü• ÈúÄË¶ÅÈ°µÂÜôÂÖ•Êó∂Âõ†‰∏∫ÂèóÈôê‰∫é È°µÂÜôÁºìÂÜ≤Âô®ÁöÑÂ§ßÂ∞
             -è
 146          
 147           * 2023/12/05
 148           * ‰πãÂâçÂèàÈîô‰∫Ü ÊàëÊúÄÂºÄÂßãÁöÑÁêÜËß£Ê≤°Èîô 24c02ÂÜÖÂ≠òÂ∞±ÊòØË¢´ÂàÜ‰∏∫‰∫ÜÂ§öÈ°µ ÊØèÊ¨°ÂÜôÂÖ•Êó†Ê≥ïËá™Âä
             -®ÁøªÈ°µ
 149           * Êàë‰πãÂâçÁêÜËß£ÈîôËØØ ÂèÇËßÅ24c02ÁöÑÊï∞ÊçÆÊâãÂÜå:'ÂÜÖÂ≠òÂú∞ÂùÄ‰Ωé‰ΩçÂä†1 È´ò‰Ωç‰∏çÂèò'
 150          Â∞±ÊòØÊàë‰πãÂâçÁêÜËß£ÁöÑ
 151           * ÊâÄ‰ª•ÊàëÂ∞ÜÈáçÊñ∞ÂêØÁî®‰πãÂâçÁöÑÁÆóÊ≥ï Â∞ÜÈîôËØØÁöÑÁÆóÊ≥ïÊîæÂú®‰∏ãÊñπ‰ª•‰ΩúÂèÇËÄÉ
 152          
 153          
 154          
 155          bit At24c02_WriteData(uchar sla, uchar suba, uchar* dat, uchar num)
 156          {
 157              while (num > PAGE_BYTE) // ÊåâÈ°µÂÜôÂÖ•Êï∞ÊçÆ Âπ∂‰∏îÁ≠âÂæÖÂÜôÂÖ•ÊàêÂäüÂºÄÂßã‰∏ã‰∏ÄÈ°µÂÜôÂÖ•
 158              {
 159                  if (!At24c02_WriteByte(sla, suba, dat, PAGE_BYTE))
 160                      return 0;
 161                  suba += PAGE_BYTE;
 162                  dat += PAGE_BYTE;
 163                  num -= PAGE_BYTE;
 164                  if (!At24c02_Check(sla))
 165                      return 0;
 166              }
 167              if (At24c02_WriteByte(sla, suba, dat, num))
 168                  return At24c02_Check(sla);
 169              else
 170                  return 0;
 171          }
 172          
 173          */


C51 COMPILER V9.60.7.0   AT24C02                                                           12/06/2023 10:21:19 PAGE 4   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    448    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      25
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
