C51 COMPILER V9.60.7.0   LCD1602                                                           12/05/2023 16:16:01 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD1602
OBJECT MODULE PLACED IN .\Objects\lcd1602.obj
COMPILER INVOKED BY: D:\install\Keil_v5\C51\BIN\C51.EXE ..\src\lcd1602.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\include) DEB
                    -UG OBJECTEXTEND PRINT(.\Listings\lcd1602.lst) TABS(2) OBJECT(.\Objects\lcd1602.obj)

line level    source

   1          /**
   2           * 作者：李宗霖 日期：2023/11/16
   3           * CSDN昵称：Leisure_水中鱼
   4           * CSDN: https://blog.csdn.net/Supine_0?type=blog
   5           * ----------------------------------------------
   6           * - 此头文件对文件：'__config__.h' 强依赖
   7           * - 数据端口 控制端口 需要通过'__config__.h'配置
   8           * - LCD1602_D RS RW EN
   9           * ----------------------------------------------
  10           * 写数据和写命令完全不需要在最后加上delay，如果连续执行不正常，就是CheckBus
             -y有问题
  11           */
  12          #include "__config__.h"
  13          /**
  14           * - 如果 '__config__.h' 文件丢失 或者出现问题 创建空的 '__config__.h' 文件
  15           * - 在 '__config__.h' 中 定义 LCD_1602_USE_DEFAULT 以降低对 '__config__.h'
  16           * 的依赖
  17           * - 也可以直接在此文件中进行配置:
  18           *     好处是取消对'__config__.h' 的依赖 降低耦合
  19           *     代价是没有集中端口配置 让配置、修改、调试、移植 的成本变高
  20           */
  21          #ifdef LCD1602_USE_DEFAULT
              #include <REG52.H>
              #undef LCD1602_DEFINE_RS
              #undef LCD1602_DEFINE_RW
              #undef LCD1602_DEFINE_EN
              #undef LCD1602_DATA
              #define LCD1602_DEFINE_RS P1 ^ 0 // 寄存器选择
              #define LCD1602_DEFINE_RW P1 ^ 1 // 读/写
              #define LCD1602_DEFINE_EN P1 ^ 2 // 使能
              #define LCD1602_DATA P0          // 数据 to LCD
              #endif
  32          
  33          sbit RS = LCD1602_DEFINE_RS; // 寄存器选择
  34          sbit RW = LCD1602_DEFINE_RW; // 读/写
  35          sbit EN = LCD1602_DEFINE_EN; // 使能
  36          #define DT LCD1602_DATA
  37          
  38          // -------------------------------------
  39          
  40          void LCD1602_CheckBusy(void)
  41          {
  42   1          unsigned char busy;
  43   1          DT = 0xff;
  44   1          do
  45   1          {
  46   2              busy = 0xff;
  47   2              EN = 0;
  48   2              RS = 0;
  49   2              RW = 1;
  50   2              EN = 1;
  51   2              busy = DT;
  52   2          } while (busy & 0x80);
  53   1          EN = 0;
C51 COMPILER V9.60.7.0   LCD1602                                                           12/05/2023 16:16:01 PAGE 2   

  54   1      }
  55          
  56          void LCD1602_WriteByte(bit rs, unsigned char byte);
  57          
  58          void LCD1602_WriteCmd(unsigned char cmd)
  59          {
  60   1          if (!cmd)
  61   1              return;
  62   1          LCD1602_WriteByte(0, cmd);
  63   1      }
  64          
  65          void LCD1602_WriteData(unsigned char dat)
  66          {
  67   1          LCD1602_WriteByte(1, dat);
  68   1      }
  69          
  70          #ifndef LCD1602_NO_READDATA
              unsigned char LCD1602_ReadData(void)
              {
                  unsigned char dat;
                  LCD1602_CheckBusy();
                  DT = 0xff;
                  RW = 1;
                  RS = 1;
                  EN = 1;
                  dat = DT;
                  EN = 0;
                  return dat;
              }
              #endif
  84          
  85          // -------------------------------------
  86          
  87          extern void _nop_(void);
  88          
  89          void LCD1602_WriteByte(bit rs, unsigned char byte)
  90          {
  91   1          LCD1602_CheckBusy();
  92   1          RW = 0;
  93   1          RS = rs; // 0 写命令  1 写数据
  94   1          DT = byte;
  95   1          EN = 1; // EN: 0 -> 1
  96   1          _nop_();
  97   1          EN = 0;
  98   1      }
  99          
 100          // -------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     56    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
